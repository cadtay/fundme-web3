{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"./PriceConverter.sol\";\n\nerror FundMe__NotOwner();\n\ncontract FundMe {\n    using PriceConverter for uint256;\n    \n    uint256 public constant MINIMUM_USD = 50 * 1e18;\n    address private immutable i_owner;\n\n    address[] private s_funders;\n    mapping(address => uint256) private s_addressToAmountFunded;\n    AggregatorV3Interface private s_priceFeed;\n\n    modifier onlyOwner {\n        // using this method can reduce gas cost\n        if (msg.sender != i_owner) { revert FundMe__NotOwner(); }\n        _;\n    }\n    \n    constructor(address priceFeedAddress) {\n        i_owner = msg.sender;\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n\n    function fund() public payable {\n        require(msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD, \"Did not send enough\");\n        s_funders.push(msg.sender);\n        s_addressToAmountFunded[msg.sender] = msg.value;\n    }\n\n    function withdraw() public payable onlyOwner {\n        for (uint256 i = 0; i < s_funders.length; i++) {\n            address funder = s_funders[i];\n            s_addressToAmountFunded[funder] = 0;\n        }\n\n        s_funders = new address[](0);\n\n        // transfer: capped at 2300 gas, if it goes over throws errow, no longer reccomended\n        //payable(msg.sender).transfer(address(this).balance);\n\n        // send: capped at 2300 gas, if it goes over retuns bool to indicate success, no longer reccomended\n        //bool isSuccess = payable(msg.sender).send(address(this).balance);\n       // require(isSuccess, \"send failed, due to going above 2300 gas cap limit\");\n\n        // call: forward all gas or set gas, returns bool\n        (bool sent,) = payable(msg.sender).call{value: address(this).balance}(\"\");\n        require(sent, \"Failed to send\");\n    }\n\n    function cheaperWithdraw() public payable onlyOwner {\n        address[] memory funders = s_funders;\n        // mappinds can't be in memory\n\n        for (uint256 i = 0; i < funders.length; i++) {\n            address funder = funders[i];\n            s_addressToAmountFunded[funder] = 0;\n        }\n\n        s_funders = new address[](0);\n\n        (bool sent,) = payable(msg.sender).call{value: address(this).balance}(\"\");\n        require(sent, \"Failed to send\");\n    }\n\n    function getOwner() public view returns(address) {\n        return i_owner;\n    }\n\n    function getFunder(uint256 index) public view returns(address) {\n        return s_funders[index];\n    }\n\n    function getAddressToAmountedFunded(address funder) public view returns(uint256) {\n        return s_addressToAmountFunded[funder];\n    }\n\n    function getPriceFeed() public view returns(AggregatorV3Interface) {\n        return s_priceFeed;\n    }\n}"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n        function getPrice(AggregatorV3Interface priceFeed) internal view returns(uint256) {\n        (,int256 answer,,,) = priceFeed.latestRoundData();\n\n        return uint256(answer * 1e10);\n    }\n\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed) internal view returns(uint256) {\n        uint256 ethPrice = getPrice(priceFeed);\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\n        return ethAmountInUsd;\n    }\n}"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}